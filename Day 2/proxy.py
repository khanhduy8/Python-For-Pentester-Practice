import sys
import socket
import threading

hex_filter = ''.join([(len(repr(chr(i))) == 3) and chr(i) or '.' for i in range(256)])

def hexdump(src, length=16, show=True):
    if isinstance(src, bytes):
        src = src.decode()
    results = list()
    for i in range(0, len(src), length):
        word = str(src[i:i+length])

        printable = word.translate(hex_filter)
        hexa = ' '.join(f'{ord(c):2X}' for c in word)
        hexwidth = length*3

        results.append(f'{i:04x} {hexa:<{hexwidth}} {printable}')

        if show:
            for line in results:
                print(line)
        else:
            return results

def receive_from(connection):
    buffer = b''
    connection.settimeout(5)
    try:
        while(True):
            data = connection.recv(4096)
            if not data:
                break
            buffer += data
    except Exception as e:
        pass
    return buffer

def request_handler(buffer):
    return buffer

def response_handler(buffer):
    return buffer

def proxy_handler(client_socket, remote_host, remote_port, receive_first):
    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socket.connect((remote_host, remote_port))

    if receive_first:
        remote_buffer = receive_from(remote_socket)
        hexdump(remote_buffer)
        remote_buffer = response_handler(remote_buffer)

        if len(remote_buffer):
            client_socket.send(remote_buffer)

    while(True):
        local_buffer = receive_from(client_socket)
        if len(local_buffer):
            hexdump(local_buffer)
            local_buffer = request_handler(local_buffer)
            remote_socket.send(local_buffer)
        remote_buffer = receive_from(remote_socket)
        if len(remote_buffer):
            hexdump(remote_buffer)
            remote_buffer = response_handler(remote_buffer)
            client_socket.send(remote_buffer)

        if not len(remote_buffer) or not len(local_buffer):
            client_socket.close()
            remote_socket.close()
            break

def server_loop(local_host, local_port, remote_host, remote_port, receive_first):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server.bind((local_host, local_port))
    except Exception as e:
        pass
        sys.exit(0)
    server.listen(5)
    while True:
        client_socket, address = server.accept()
        proxy_thread = threading.Thread(
            target=proxy_handler,
            args=(client_socket, remote_host, remote_port, receive_first)
        )
        proxy_thread.start()

def main():
    # local_host = sys.argv[1]
    # local_port = int(sys.argv[2])
    #
    # remote_host = sys.argv[3]
    # remote_port = int(sys.argv[4])
    #
    # receive_first = sys.argv[5]
    # if "True" in receive_first:
    #     receive_first = True
    # else:
    #     receive_first = False
    local_host = "0.0.0.0"
    local_port = 1337
    remote_host = "google.com"
    remote_port = 80
    receive_first = False

    server_loop(local_host, local_port, remote_host, remote_port, receive_first)

if __name__ == "__main__":
    main()

